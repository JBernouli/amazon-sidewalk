/***************************************************************************//**
 * @file sl_command_table.c
 * @brief Declarations of relevant command structs for cli framework.
 * @version x.y.z
 *******************************************************************************
 * # License
 * <b>Copyright 2022 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * SPDX-License-Identifier: Zlib
 *
 * The licensor of this software is Silicon Laboratories Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 ******************************************************************************/

#include "app_log.h"
#include "sl_command_table.h"

#ifdef __cplusplus
extern "C" {{ '{' }}
#endif

/*******************************************************************************
 *****************************   TEMPLATED FILE   ******************************
 ******************************************************************************/

{# Input validation -#}
{# Validate that names and handlers are defined -#}
{%- for command in sidewalk_command -%}
  {%- if not command.name -%}
    {{ raise("Missing command name for sidewalk_command entry") }}
  {%- endif -%}
  {%- if not command.handler -%}
    {{ raise("Missing handler for sidewalk_command entry") }}
  {%- endif -%}
{%- endfor -%}
{%- for group in cli_group -%}
  {%- if not group.name -%}
    {{ raise("Missing group name for cli_group entry") }}
  {%- endif -%}
{%- endfor -%}
{# Validate argument types -#}
{%- set types = ['uint8', 'uint16', 'uint32', 'int8', 'int16', 'int32', 'string', 'hex', 'uint8opt', 'uint16opt', 'uint32opt', 'int8opt', 'int16opt', 'int32opt', 'stringopt', 'hexopt', 'additional', 'wildcard'] -%}
{%- for command in sidewalk_command -%}
  {%- for arg in command.argument -%}
    {%- if not arg.type %}
      {{ raise("Argument must have type specifyer") }}
    {%- endif -%}
    {%- if arg.type.lower() not in types -%}
      {{ raise("Invalid argument type \'{}\'. Argument type must be one of: {}".format(arg.type.lower(), ", ".join(types))) }}
    {%- endif -%}
  {%- endfor -%}
{%- endfor -%}

{#- Check if any command or group is provided.
    If not, do nothing but print out comment indicating this in file #}
{%- if sidewalk_command or cli_group -%}

// Create group command tables and structs if sidewalk_groups given
// in template. Group name is suffixed with _group_table for tables
// and group commands are sidewalk_cmd_grp_( group name )
{# Recursively loop through the groups. The lowest group in the hierarchy
   must be handled first, so the loop first digs down to find the lowest
   group, and generates for that group first, then proceeds upwards -#}
{%- set already_handled = [] -%}
{%- for group in cli_group if group.name recursive -%}
{#- For subgroups, use id if set, otherwise use name.
    For root level groups, always use name -#}
{%- set group_name = (group.id or group.name if group.group) or group.name -%}
{# Check if any other group reference this group #}
{%- set outer_loop = loop -%}
{%- for sub_group in cli_group if sub_group.group -%}
  {%- set sub_group_name = sub_group.id or sub_group.name -%}
  {%- if sub_group.group == group_name -%}
    {%- if sub_group_name not in already_handled and sub_group_name -%}
      {{ outer_loop([sub_group]) }}
    {%- endif -%}
  {%- endif -%}
{%- endfor -%}
{%- if group_name not in already_handled -%}
{# Group table -#}
static const sl_command_entry_t {{ group_name|replace("-","_hyphen_") }}_group_table[] = {{ '{' }}
{%- for command in sidewalk_command if command.group == group_name %}
  {{ '{' }} "{{ command.name }}", &sidewalk_cmd_{{command.group|replace("-","_hyphen_")}}_{{ command.name|replace("-","_hyphen_") }}, false {{ '}' }},
  {%- if command.shortcuts %}
  {%- for shortcut in command.shortcuts %}
  {{ '{' }} "{{ shortcut.name }}", &sidewalk_cmd_{{command.group|replace("-","_hyphen_")}}_{{ command.name|replace("-","_hyphen_") }}, true {{ '}' }},
  {%- endfor %}
  {%- endif %}
{%- endfor %}
{%- for sub_group in cli_group if sub_group.group == group_name %}
  {%- set sub_group_name = sub_group.id or sub_group.name %}
  {{ '{' }} "{{ sub_group.name }}", &sidewalk_cmd_grp_{{ sub_group_name|replace("-","_hyphen_") }}, false {{ '}' }},
  {%- if sub_group.shortcuts %}
  {%- for shortcut in sub_group.shortcuts %}
  {{ '{' }} "{{ shortcut.name }}", &sidewalk_cmd_grp_{{ sub_group_name|replace("-","_hyphen_") }}, true {{ '}' }},
  {%- endfor %}
  {%- endif %}
{%- endfor %}
  {{ '{' }} NULL, NULL, false {{ '}' }},
{{ '}' }};
{#- Group command #}
static const sl_command_info_t sidewalk_cmd_grp_{{ group_name|replace("-","_hyphen_") }} = \
  SL_COMMAND_GROUP({{ group_name|replace("-","_hyphen_") }}_group_table, {% if group.help -%} "{{ group.help }}" {%- else -%} "" {%- endif %});
{% if already_handled.append(group_name) -%}
{# This block does nothin, it only exists to perform the appending to
   already_handled. Could be done cleaner with 'do' statement, if that
   extension is enabled #}
{%- endif %}
{% endif %}
{%- endfor -%}

// Create root command table
const sl_sidewalk_command_t SL_SIDEWALK_COMMANDS[] = {{ '{' }}
{%- for command in sidewalk_command %}
  {{ '[' }}{{ command.index }}{{ ']' }} = {
    .command = "{{ command.name }}",
    .callback = {{ command.handler }}
  },
{%- endfor %}
{{ '}' }};
{% else %}
/*******************************************************************************
 * No template contributions supplied to project. Provide external definition
 * of command table or regenerate project with template contributions.
 ******************************************************************************/
const sl_sidewalk_command_t *SL_SIDEWALK_COMMANDS = NULL;
{% endif %}
#ifdef __cplusplus
{{ '}' }}
#endif
